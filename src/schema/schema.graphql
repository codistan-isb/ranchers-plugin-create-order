extend type Order {
  id: ID!
  startTime: String
  endTime: String
  OrderStatus: OrderStatusValue
  OrderID: String
  username: String
  branches: String
  riderID: String
  "branch Info Displayed"
  branchInfo: Branch
  Notes: String
  riderInfo: Account
  customerInfo: customerInfoPayload
  rejectionReason: String
  customerOrderTime: customerOrderTimePayload
  branchTimePickup: branchTimePickupPayload
  kitchenOrderIDInfo: kitchenOrderIDPayload
  riderOrderInfo: riderOrderInfoPayload
}
type riderOrderInfoPayload {
  _id: ID
  startTime: DateTime
  OrderStatus: String
  OrderID: String
  branches: String
  riderID: String
  createdAt: DateTime
  endTime: DateTime
}
type OrderReport {
  riderID: String
  riderName: String
  branchCity: String
  branches: String
  OrderStatus: OrderStatusValue
  deliveryTime: String
  startTime: DateTime
  endTime: DateTime
  username: String
  OrderID: String
  "branch Info Displayed"
  branchInfo: Branch
  rejectionReason: String
  customerInfo: customerInfoPayload
}
extend type Address {
  Latitude: Float
  Longitude: Float
}
type customerInfoPayload {
  fullName: String
  phone: String
  address1: String
  city: String
  country: String
  postal: String
  region: String
}
type customerOrderTimePayload {
  customerOrderTime: DateTime
}
type branchTimePickupPayload {
  branchOrderTime: DateTime
}
type kitchenOrderIDPayload {
  kitchenOrderID: String
}
# type BranchOrderReport {
#   b_id: ID
#   branchAccountId: ID
#   branchCartId: ID
#   branchCreatedAt: String
#   branchCurrencyCode: String
#   branchEmail: String
#   branchOrdererPreferredLanguage: String
#   branchPayments: [Payment]
#   branchShipping: [Shipping]
# }
type UserCurrentStatus {
  _id: ID
  currentStatus: UserStatus
  updatedAt: String
  UserRole: UserRoleValue
  username: String
  branchCity: String
  branches: String
}
enum OrderStatusValue {
  "Preparing your meal"
  processing

  "We're all set"
  confirmed

  " The food's ready to ride"
  ready

  "Your meal is picked up"
  pickedUp

  "delivered order"
  delivered

  "Canceled order"
  canceled

  "For new order"
  new

  "Reject Order"
  reject
}
enum UserRoleValue {
  admin
  dispatcher
  rider
}
enum UserStatus {
  online
  offline
}
# type branchOwnerReportOutput {
#   _id: ID
#   accountId: String
#   cartId: String
#   createdAt:String
#   currencyCode: String
#   email: String
# }
type UserAccountDetail {
  _id: ID!
  username: String
  branch: [String!]!
}
type UserBranchData {
  _id: ID!
  branches: [String]
}
type RiderOrderDetail {
  OrderID: ID
  startTime: String
  endTime: String
  OrderStatus: OrderStatusValue
  branches: String
  username: String
}
input NewRiderOrderInput {
  startTime: String
  endTime: String
  OrderStatus: OrderStatusValue!
  OrderID: String
  branches: ID!
  riderID: String
  oldRiderID: String
}

type Mutation {
  createRiderOrder(orders: [NewRiderOrderInput]): Order
  updateRiderOrder(
    id: ID
    startTime: String
    endTime: String
    OrderStatus: OrderStatusValue
    OrderID: String!
    riderID: String!
    rejectionReason: String
  ): Order
  updateUserCurrentStatus(status: UserStatus!): UserCurrentStatus
  assignBranchtoUser(userID: ID!, branches: String!): UserBranchData!
  updateAccountAdmin(userID: ID!, branches: String!): UserBranchData!
  addBranchNotes(orderId: ID!, Notes: String!): Order
}

type Query {
  getOrderById(id: ID!): [Order]
  getOrdersByStatus(OrderStatus: OrderStatusValue!): [Order]
  generateOrderReport(
    branches: String
    startTime: DateTime
    endTime: DateTime
    riderID: String
    OrderID: String
    fromDate: DateTime
    toDate: DateTime
    deliveryTime: Float
  ): [OrderReport]
  getRiderOrdersByLoginRider(
    LoginRiderID: String! # startDate: String # endDate: String
  ): [RiderOrderDetail]
  getKitchenReport(
    branchID: String
    OrderStatus: OrderStatusValue
    startDate: String
    endDate: String
  ): [Order]
  getCustomerOrderbyID(ID: ID!): Order
}
